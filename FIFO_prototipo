#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct nodo{
    int info;
    struct nodo* next;
};

void FIFO(int dim, int *RAM, int ind, struct nodo *ptr);

/*Restituisce 1 se la lista e' vuota, 0 altrimenti*/
int isempty(struct nodo* ptr);

/*Cancella l'ultimo nodo della lista*/
void delete_last(struct nodo* ptr);

/*Crea un nuovo nodo*/
struct nodo* new_nodo(int info);

/*Aggiunge un nodo all'inizio della lista*/
void pre_insert(struct nodo** pptr, int val);

/*Sposta tutti gli elementi dell'array a destra di una posizione, perdendo l'ultimo elemento e duplicandom il primo*/
void right_shift(int dim, int *array);

/*Stampa l'array*/
void stampa_array(int* A, int dim);

/*Stampa la lista*/
void print_list(struct nodo* ptr);

int main(){

    int A[5]={4, 3, 2, 1, 0};
    int indirizzo=5;
    struct nodo* next;

    struct nodo* lista = NULL;

    pre_insert(&lista, 0);
    pre_insert(&lista, 1);
    pre_insert(&lista, 2);
    pre_insert(&lista, 3);
    pre_insert(&lista, 4);

    

    FIFO(5, A, indirizzo, lista);
    
    return 0;
}

void FIFO(int dim, int *RAM, int ind, struct nodo *ptr){
    
    print_list(ptr);
    printf("\n");

    //cancello l'ultimo nodo della lista
    delete_last(ptr);

    //aggiungo all'inizio della lista un nodo con valore ind
    pre_insert(&ptr, ind);

    //faccio scorrere tutti gli elementi della RAM avanti di una posizione (perdendo traquillamente l'ultimo perche' non ci serve)
    right_shift(dim, RAM);

    //aggiungo ind come primo elemento della RAM
    RAM[0]=ind;

    print_list(ptr);

}

int isempty(struct nodo* ptr){
    return ptr == NULL? 1: 0;
}

void delete_last(struct nodo** pptr){               //da finire
    
    while(isempty(*pptr) == 0){       
        prevptr = pptr;
        pptr = &((*pptr)->next);
    }

}

void suf_insert(struct nodo** pptr, int val){
    struct nodo* nuovo = new_nodo(val);
    while(isempty(*pptr)==0){
        pptr = &((*pptr)->next);
    }
    *pptr = nuovo;
}

struct nodo* new_nodo(int info){
    struct nodo *temp = (struct nodo*)malloc(sizeof(struct nodo));
    temp->info = info;
    temp->next = NULL;
    return temp;
}

void pre_insert(struct nodo** pptr, int val){
    struct nodo* nuovo = new_nodo(val);
    nuovo->next = *pptr;
    *pptr = nuovo;
}

void right_shift(int dim, int *array){
    for(int i = dim-1; i >= 0; i--){
        array[i+1] = array[i];
    }
}

//funzione di servizio
void stampa_array(int* A, int dim){
    printf("[");
    if(A != NULL & dim > 0){
        printf("%d", A[0]);
    }
    for(int i = 1; i < dim; i++){
        printf(",%d", A[i]);
    }
    printf("]");
}

//funzione di servizio
void print_list(struct nodo* ptr){
    if(isempty(ptr)==1){
        printf("Vuota\n");
    }
    else{
        while(isempty(ptr)==0){
            printf("%d ", ptr->info);
            ptr = ptr->next;
        }
        printf("\n");
    }
}
