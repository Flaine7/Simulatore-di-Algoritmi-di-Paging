#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void FIFO(int dim, int RAM[dim], int ind, struct nodo *ptr);

/*Restituisce 1 se la lista e' vuota, 0 altrimenti*/
int isempty(struct nodo* ptr);

/*Cancella l'ultimo nodo della lista*/
void delete_last(struct nodo* ptr);

/*Crea un nuovo nodo*/
struct nodo* new_nodo(int info);

/*Aggiunge un nodo all'inizio della lista*/
void pre_insert(struct nodo** pptr, int val);

/*Sposta tutti gli elementi dell'array a destra di una posizione, perdendo l'ultimo elemento e duplicandom il primo*/
void right_shift(int dim, int array[dim]);

/*Stampa l'array*/
void stampa_array(int* A, int dim);

int main(){

    int A[5]={4, 3, 2, 1, 0};
    int indirizzo=5;
    struct nodo* lista;

    stampa_array(A, 5);

    right_shift(5, A);

    FIFO(5, A, indirizzo, lista);

    stampa_array(A, 5);
    
    return 0;
}

void FIFO(int dim, int RAM[dim], int ind, struct nodo *ptr){
    
    //cancello l'ultimo nodo della lista
    delete_last(ptr);

    //aggiungo all'inizio della lista un nodo con valore ind
    pre_insert(&ptr, ind);

    //faccio scorrere tutti gli elementi della RAM avanti di una posizione (perdendo traquillamente l'ultimo perche' non ci serve)
    right_shift(RAM, dim);

    //aggiungo ind come primo elemento della RAM

RAM[0]=ind;
}

int isempty(struct nodo* ptr){
    return ptr==NULL? 1: 0;
}

void delete_last(struct nodo* ptr){
    struct nodo * ptr1 = ptr;               //puntatore al nodo da cancellare 
    struct nodo * ptr2 = ptr->next;         //puntatore al nodo precedente a quello da cancellare
    while(isempty(ptr1) == 0){
        ptr2 = ptr1;
        ptr1 = ptr2->next;
    }

    ptr2=NULL;
    free(ptr1);
}

struct nodo* new_nodo(int info){
    struct nodo *temp = (struct nodo*)malloc(sizeof(struct nodo));
    temp->info = info;
    temp->next = NULL;
    return temp;
}

void pre_insert(struct nodo** pptr, int val){
    struct nodo* nuovo = new_nodo(val);
    nuovo->next = *pptr;
    *pptr = nuovo;
}

void right_shift(int dim, int array[dim]){
    for(int i=dim-1; i>=0; i--){
        array[i+1]=array[i];
    }
}

//funzione di servizio
void stampa_array(int* A, int dim){
    printf("[");
    if(A != NULL & dim > 0){
        printf("%d", A[0]);
    }
    for(int i=1; i<dim; i++){
        printf(",%d", A[i]);
    }
    printf("]");
}
